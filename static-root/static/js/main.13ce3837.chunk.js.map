{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","current","value","newVal","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","ActionBtn","tweet","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.13ce3837.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React , {useEffect,useState} from 'react'\r\nimport {loadTweets} from '../lookup'\r\n\r\n export function TweetsComponent(props) {\r\n   const textAreaRef=React.createRef()\r\n   const [newTweets,setNewTweets]=useState([])\r\n\r\n\r\n    const handleSubmit=(event) =>{\r\n      event.preventDefault()\r\n      console.log(textAreaRef.current.value)\r\n      const newVal=textAreaRef.current.value\r\n      let tempNewTweets=[...newTweets]\r\n      tempNewTweets.unshift({\r\n        content:newVal,\r\n        likes:0,\r\n        id:121\r\n      })\r\n      setNewTweets(tempNewTweets)\r\n      textAreaRef.current.value=''\r\n    }\r\n    return<div className={props.className}>\r\n    <div className='col-12 mb-3'>\r\n    <form onSubmit={handleSubmit}>\r\n    <textarea ref={textAreaRef}required={true} className='form-control' name='tweet'>\r\n\r\n    </textarea>\r\n    <button type='submit' className='btn btn-primary my-3'>Tweet </button>>\r\n\r\n   </form>\r\n   </div>\r\n   <TweetsList newTweets={newTweets}/>\r\n   </div>\r\n\r\n}\r\n export function ActionBtn(props){\r\n  const {tweet,action}=props\r\n  const [likes,setLikes] =useState(tweet.likes ? tweet.likes : 0)\r\n  const[userLike,setUserLike]=useState(tweet.userLike===true ? true:false )\r\n  const className=props.className ? props.className : 'btn btn-primary btn-sm'\r\n  const actionDisplay=action.display ? action.display :'Action'\r\n  const handleClick=(event) => {\r\n    event.preventDefault()\r\n    if(action.type ==='like'){\r\n      console.log(tweet.likes+1)\r\n      if(userLike ===true){\r\n        setLikes(likes-1)\r\n        setUserLike(false)\r\n      }\r\n      else{\r\n        setLikes(likes+1)\r\n        setUserLike(true)\r\n\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n  const display = action.type === 'like' ?  `${likes} ${actionDisplay}` : actionDisplay\r\n  return  <button className={className} onClick={handleClick}>{display} </button>\r\n\r\n}\r\n\r\nexport function Tweet(props){\r\n\r\n  const {tweet}=props\r\n  const className=props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n\r\n  return <div className={className}>\r\n        <p>{tweet.id}. {tweet.content}</p>\r\n        <div className='btn btn-group'>\r\n        <ActionBtn tweet={tweet} action={{type:\"like\",display:\"Like\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\",display:\"Unlike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\",display:\"Retweet\"}}/>\r\n        </div>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TweetsList(props){\r\n  const [tweetsInit,setTweetsInit]=useState([{}])\r\n  const[tweets,setTweets]=useState([])\r\n  useEffect(()=>{\r\n    const final=[...props.newTweets].concat(tweetsInit)\r\n    if (final.length!==tweets.length){\r\n      setTweets(final)\r\n    }\r\n  }, [props.newTweets,tweets,tweetsInit])\r\n\r\n\r\n  useEffect(()=>{\r\n    const myCallback=(response,status)=>{\r\n      if (status===200){\r\n        setTweetsInit(response)\r\n      }else{\r\n        alert(\"there was am error\")\r\n      }\r\n\r\n\r\n\r\n    }\r\n    loadTweets(myCallback)\r\n\r\n\r\n  },[])\r\n  return tweets.map((item,index)=>{\r\n      return <Tweet tweet ={item} className='my-5 py-5 border bg-white text-dark' key={'${index}-{item.id}'} />\r\n    })}\r\n","import React , {useEffect,useState} from 'react'\r\n\r\nexport function loadTweets(callback){\r\n    const xhr=new XMLHttpRequest()\r\n    const method='GET'\r\n    const url='http://localhost:8000/api/tweets/'\r\n    const responseType='json'\r\n\r\n    xhr.responseType=responseType\r\n\r\n    xhr.open(method,url)\r\n\r\n    xhr.onload = function(){\r\n      callback(xhr.response,xhr.status)\r\n\r\n    }\r\n    xhr.onerror=function(e){\r\n      console.log(e)\r\n      callback({\"message\":\"the request was error\"},400)\r\n    }\r\n    xhr.send()\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport {TweetsComponent} from './tweets'\n\n\n\n\n\n\nfunction App() {\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl=document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n\n\n);\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent/>\n    </React.StrictMode>,\n    tweetsEl\n\n\n);\n\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}